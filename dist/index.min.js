"use strict";var e=require("dotenv");function r(e){var r=Object.create(null);return e&&Object.keys(e).forEach((function(t){if("default"!==t){var n=Object.getOwnPropertyDescriptor(e,t);Object.defineProperty(r,t,n.get?n:{enumerable:!0,get:function(){return e[t]}})}})),r.default=e,Object.freeze(r)}const t={};async function n(e){if(t[e])return{...t[e]};let r=await fetch(`${process.env.PROWLARR_BASE_URL}/api/v1/indexer/${e}&apikey=${process.env.PROWLARR_KEY}`,{method:"GET",headers:{"Content-Type":"application/json"}});try{if(200===r.status)return t[e]=await r.json(),{...t[e]}}catch(e){throw console.warn("error parsing indexer info from prowlarr."),console.warn(e),new Error("Error parsing indexer info from prowlarr.")}throw console.warn(`Error: Prowlarr responded to indexer info request with ${r.status}`),new Error(`Error: Prowlarr responded to indexer info request with ${r.status}`)}r(e).config(),async function({eventDate:e,eventName:r,eventNumber:t,acceptableQuality:o,maxSizeBytes:s,minSeeders:i,eventType:a="main"}){let l=await fetch(`${process.env.PROWLARR_BASE_URL}/api/v1/search?query=UFC+${t}&indexerIds=-2&type=search&apikey=${process.env.PROWLARR_KEY}`,{method:"GET",headers:{"Content-Type":"application/json"}});if(200!==l.status){console.warn("Error: Could not reach Prowlarr"),console.warn(`Could not send fetch request, failed with status ${l.status}`);try{let e=l.text();console.warn(`Response: ${e}`)}catch(e){console.warn("Response had no body")}return void console.warn("Giving up finding torrent")}let c=[];try{c=await l.json()}catch(e){console.warn("Response from prowlarr invalid"),console.warn(e);try{let e=l.text();console.warn(`Response: ${e}`)}catch(e){console.warn("Response had no body")}}console.log(`found ${c.length} results total`),c=await async function(e){e.forEach((e=>{["early prelims","early preliminaries"," early"].some((r=>e.title.toLowerCase().includes(r.toLowerCase())||e.sortTitle.toLowerCase().includes(r)))?e.eventType="earlyPrelims":["prelims","preliminaries","preliminary"].some((r=>e.title.toLowerCase().includes(r.toLowerCase())||e.sortTitle.toLowerCase().includes(r)))?e.eventType="prelims":e.eventType="main"}));for(let r=0;r<e.length;r++){const t=e[r];t.indexerPriority=(await n(t.indexerId)).priority}return e}(c),c=function({eventDate:e,eventName:r,eventNumber:t,acceptableQuality:n,maxSizeBytes:o,minSeeders:s},i){let a=e=>{Array.isArray(e)||(e=[e]),Array.isArray(e)&&(i=i.filter((r=>e.some((e=>r.title.toLowerCase().includes(e.toLowerCase())||r.sortTitle.toLowerCase().includes(e))))))};a("UFC"),console.log(`found ${i.length} with UFC in title`),a(t.toString()),console.log(`found ${i.length} with correct event number`),n&&(a(n),console.log(`found ${i.length} with Acceptable Quality`));s&&(i=i.filter((e=>e.seeders>s)),console.log(`found ${i.length} with more than ${s} seeders`));o&&(i=i.filter((e=>e.size<o)),console.log(`found ${i.length} smaller than ${Math.round(o/1e9*100)/100} GB`));return i=i.filter((e=>!e.sortTitle.match(/part [\d]/))),console.log(`found ${i.length} results that aren't multi-part`),i}({eventDate:e,eventName:r,eventNumber:t,acceptableQuality:o,maxSizeBytes:s,minSeeders:i},c),function(e){e.sort(((e,r)=>e.indexerPriority!==r.indexerPriority?e.indexerPriority-r.indexerPriority:r.seeders-e.seeders))}(c),console.log("Best result: "),console.log(JSON.stringify(c[0]||{}))}({eventNumber:251,acceptableQuality:["1080"],maxSizeBytes:8e9,minSeeders:3,eventType:"main"});
